// if the number has a unit (px, em, rem etc.) it just returns it, else
// when the number is unitless, it adds px.
@function add-unit($number) {
	@if type-of($number) == 'number' and unitless($number) {
		@return $number + 'px';
	}
	@if type-of($number) == 'number' and unit($number) == '%' {
		@error "$number may not be a percentage, was #{$number}.";
	}
	@return $number;
}

@mixin media($media-1, $media-2: null) {

	$media-1__low: if(type-of($media-1) == number, $media-1, nth($media-1, 1));
	$media-1__high: if(type-of($media-1) == number, $media-1, nth($media-1, 2));

	@if $media-2 == null {
		@if $media-1__high == false {
			@include respond(add-unit($media-1__low)) { @content; }
		} @else {
			@include respond(add-unit($media-1__low), add-unit($media-1__high)) { @content; }
		}
	} @else {
		@if $media-2 == false {
			@include respond(add-unit($media-1__low)) { @content; }
		} @else {
			$media-2__low: if(type-of($media-2) == number, $media-2, nth($media-2, 1));
			$media-2__high: if(type-of($media-2) == number, $media-2, nth($media-2, 2));

			$min-width: if($media-2 and $media-1__low < $media-2__low, $media-1__low, $media-2__low);
			$max-width: if($media-2__low == $media-2__high, $media-2, if($media-2__high and $media-1__high > $media-2__high, $media-1__high, $media-2__high));

			@if $max-width == false {
				@include respond(add-unit($min-width)) { @content; }
			} @else {
				@include respond(add-unit($min-width), add-unit($max-width)) { @content; }
			}
		}
	}
}
